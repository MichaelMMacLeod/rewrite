// Converts a flat list of bits into our internal binary number
// representation:
//
// (bin 1 0 1) --> 1 + 2 * (2 * (1 + 2 * 0))
(def (bin)
  0)
(def (bin $b .. 0)
  (2 * (bin $b ..)))
(def (bin $b .. 1)
  (1 + 2 * (bin $b ..)))

// add : Bin -> Bin -> Bin
(def (add 0 0)
  0)
(def (add (2 * $n) 0)
  (2 * $n))
(def (add 0 (2 * $m))
  (2 * $m))
(def (add (1 + 2 * $n) 0)
  (1 + 2 * $n))
(def (add 0 (1 + 2 * $m))
  (1 + 2 * $m))
(def (add (2 * $n) (2 * $m))
  (2 * (add $n $m)))
(def (add (1 + 2 * $n) (1 + 2 * $m))
  (add (2 * (1 + 2 * 0))
       (2 * (add $n $m))))
(def (add (1 + 2 * $n) (2 * $m))
  (1 + 2 * (add $n $m)))
(def (add (2 * $n) (1 + 2 * $m))
  (1 + 2 * (add $n $m)))

// mul : Bin -> Bin -> Bin
(def (mul $n 0)
  0)
(def (mul $n (2 * $m))
  (2 * (mul $n $m)))
(def (mul $n (1 + 2 * $m))
  (add $n (2 * (mul $n $m))))

// equal : Bin -> Bin -> Bool
(def (equal 0 0)
  true)
(def (equal (1 + 2 * $n) 0)
  false)
(def (equal 0 (1 + 2 * $m))
  false)
(def (equal (2 * $n) (1 + 2 * $m))
  false)
(def (equal (1 + 2 * $n) (2 * $m))
  false)
(def (equal (2 * $n) 0)
  (equal $n 0))
(def (equal 0 (2 * $m))
  (equal 0 $m))
(def (equal (2 * $n) (2 * $m))
  (equal $n $m))
(def (equal (1 + 2 * $n) (1 + 2 * $m))
  (equal $n $m))
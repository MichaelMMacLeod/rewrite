(def (head (cons $a $d))
  (some $a))
(def (head nil)
  none)

(def (take 0 $c)
  nil)
(def (take (S $n) (cons $a $d))
  (cons $a (take $n $d)))

(def (repeat $x)
  (cons $x (repeat $x)))

(def (map $f nil)
  nil)
(def (map $f (cons $a $d))
  (cons ($f $a)
        (map $f $d)))

(def (foldr $f $z nil)
  $z)
(def (foldr $f $z (cons $a $d))
  ($f $a (foldr $f $z $d)))

(def (zip-with $f (cons $a1 $d1) nil)
  nil)
(def (zip-with $f nil (cons $a2 $d2))
  nil)
(def (zip-with $f (cons $a1 $d1) (cons $a2 $d2))
  (cons ($f $a1 $a2)
        (zip-with $f $d1 $d2)))

(def 1 (S 0))
(def 2 (S 1))
(def 3 (S 2))
(def 4 (S 3))
(def 5 (S 4))

(def (add $n 0)
  $n)
(def (add $n (S $m))
  (S (add $n $m)))

(def (mul $n 0)
  0)
(def (mul $n (S $m))
  (add $n (mul $n $m)))

(def (equal 0 0) 
  true)
(def (equal 0 (S $m)) 
  false)
(def (equal (S $n) 0) 
  false)
(def (equal (S $n) (S $m))
  (equal $n $m))
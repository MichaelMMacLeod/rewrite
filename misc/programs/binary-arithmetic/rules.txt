(def (bin) 
  0)
(def (bin $b .. 0)
  (2 * (bin $b ..)))
(def (bin $b .. 1)
  (1 + 2 * (bin $b ..)))

(def (equal 0 0)
  true)
(def (equal (1 + 2 * $n) 0)
  false)
(def (equal 0 (1 + 2 * $m))
  false)
(def (equal (2 * $n) (1 + 2 * $m))
  false)
(def (equal (1 + 2 * $n) (2 * $m))
  false)
(def (equal (2 * $n) 0)
  (equal $n 0))
(def (equal 0 (2 * $m))
  (equal 0 $m))
(def (equal (2 * $n) (2 * $m))
  (equal $n $m))
(def (equal (1 + 2 * $n) (1 + 2 * $m))
  (equal $n $m))

(def (add 0 0)
  0)
(def (add (2 * $n) 0)
  (2 * $n))
(def (add 0 (2 * $m))
  (2 * $m))
(def (add (1 + 2 * $n) 0)
  (1 + 2 * $n))
(def (add 0 (1 + 2 * $m))
  (1 + 2 * $m))
(def (add (2 * $n) (2 * $m))
  (2 * (add $n $m)))
(def (add (1 + 2 * $n) (1 + 2 * $m))
  (add (2 * (1 + 2 * 0))
       (2 * (add $n $m))))
(def (add (1 + 2 * $n) (2 * $m))
  (1 + 2 * (add $n $m)))
(def (add (2 * $n) (1 + 2 * $m))
  (1 + 2 * (add $n $m)))

(def (mul $n 0)
  0)
(def (mul $n (2 * $m))
  (2 * (mul $n $m)))
(def (mul $n (1 + 2 * $m))
  (add $n (2 * (mul $n $m))))

(def (decrement 0)
  0)
(def (decrement (1 + 2 * $n))
  (2 * $n))
(def (decrement (2 * $n))
  (1 + 2 * (decrement $n)))

(def (sub 0 0)
  0)
(def (sub 0 (1 + 2 * $m))
  0)
(def (sub (1 + 2 * $n) 0)
  (1 + 2 * $n))
(def (sub 0 (2 * $m))
  0)
(def (sub (2 * $n) 0)
  (2 * $n))
(def (sub (1 + 2 * $n) (1 + 2 * $m))
  (sub (2 * $n) (2 * $m)))
(def (sub (2 * $n) (2 * $m))
  (2 * (sub $n $m)))
(def (sub (2 * $n) (1 + 2 * $m))
  (decrement (2 * (sub $n $m))))
(def (sub (1 + 2 * $n) (2 * $m))
  (1 + 2 * (sub n m)))

(def (0 > 0)
  false)
(def (0 > (2 * $n))
  false)
(def (0 > (1 + 2 * $n))
  false)
(def ((2 * $n) > 0)
  ($n > 0))
(def ((2 * $n) > (2 * $m))
  ($n > $m))
(def ((2 * $n) > (1 + 2 * $m))
  ((sub (2 * $n) (1 + 2 * $m)) > 0))
(def ((1 + 2 * $n) > 0)
  true)
(def ((1 + 2 * $n) > (2 * $m))
  ((sub (1 + 2 * $n) (2 * $n)) > 0))
(def ((1 + 2 * $n) > (1 + 2 * $m))
  ($n > $m))

(def (or true true) true)
(def (or false true) true)
(def (or true false) true)
(def (or false false) false)

(def (if true $then $else) $then)
(def (if false $then $else) $else)

(def (increment $n)
  (add (1 + 2 * 0) $n))

(def (div $n $d)
  (div-aux $n 0 $d))

(def (div-aux $r $q $d)
  (if ($r > $d)
    (div-aux (sub $r $d)
             (increment $q)
             $d)
    $q))
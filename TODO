- Profile interpreter to determine possible places to improve performance

  - Possible better way to compile ellipses:

    (def ($y .. (a b $x .. c d e))
      ($x .. $y ..))
    ---->
    $y = $input
    $x = $y.pop_end(1)
    $x.pop_end(3)
    $x.pop_front(2)
    $result = $x.append($y)

    Compound terms could be stored as a mutable doubly-linked-list (with pointers to the start and end nodes) of double-ended queues, to enable O(1) push/pop from both ends as well as
    O(1) appending via the linked list.

- Fix error messages that span multiple lines not looking correct
- Relax rules around ellipsis match counts to allow repeating vars:

  (def (copy-it $i ($x ..))
    (($i $x) ..))
  (copy-it A (x1 x2 x3))
  -->
  ((A x1) (A x2) (A x3))

- Relax rules around number of ellipses in pattern (requires lots of internal changes):

  (def (two $x .. | $y ..)
    (x = ($x ..) | y = ($y ..)))
  (two 1 2 3 | a b c)
  -->
  (x = (1 2 3) | y = (a b c))

- Add optimization passes on pattern graph
- Actually compile patterns to stmts as well (currently only constructors are compiled)
- Output webassemby/native code instead of running compiled code in haskell interpreter
- Add double-quotes to write identifiers containing spaces

  E.g., with
  
    (def 123 "one hundred twenty three")

  we could get:

    123
    -->
    "one hundred twenty three"

- Make it possible to pattern match against/construct symbols

  Something like this:

    (def (to-string 0) "")
    (def (to-string (times-two $n))
      "(to-string $n)0")
    (def (to-string (times-two-plus-one $n))
      "(to-string $n)1")

    (to-string (times-two-plus-one (times-two (times-two-plus-one 0))))
    -->
    "(to-string (times-two (times-two-plus-one 0)))1"
    -->
    "(to-string (times-two-plus-one 0))01"
    -->
    "(to-string 0)101"
    -->
    101

- Add preprocessor mode

  For example, given the following rules:

    (def STUFF preprocessor_macros)
    (def (2 + 3) 5)

    So a document containing #STUFF could be preprocessed
    and could do arbitrary calcualtions: #(2 + 3)

    -->

    So a document containing preprocessor_macros could be preprocessed
    and could do arbitrary calcualtions: 5

- Add colorized output for error messages, tracing